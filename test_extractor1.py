from design_extractor import collectProgramDesign

test_input_path = "./input.py"

def test_app_analyzer():
    expected = ({'read_crcs', 'write_crcs', 'read_byte', 'write_bytes', 'write_byte', 'read_real_uint64', 'read_uint32', 'write_uint32', 'read_uint64', 'write_real_uint64', 'write_uint64', 'read_boolean', 'write_boolean', 'read_utf16', 'write_utf16', 'bits_to_bytes'}, {'PackInfo': {'attrs': {'enable_digests', 'crcs', 'packpos', 'numstreams', 'packpositions', 'packsizes', 'digestdefined'}, 'funcs': ['__init__', 'retrieve', '_read', 'write']}, 'Bond': {'attrs': {'outcoder', 'incoder'}, 'funcs': ['__init__']}, 'Folder': {'attrs': {'packed_indices', 'unpacksizes', 'compressor', 'files', 'coders', 'crc', 'password', 'decompressor', 'bindpairs', 'digestdefined', 'solid'}, 'funcs': ['__init__', 'retrieve', '_read', 'prepare_coderinfo', 'write', 'is_simple', 'get_decompressor', 'get_compressor', 'get_unpack_size', '_find_in_bin_pair', '_find_out_bin_pair']}, 'UnpackInfo': {'attrs': {'datastreamidx', 'numfolders', 'folders'}, 'funcs': ['retrieve', '__init__', '_read', '_retrieve_coders_info', 'write']}, 'SubstreamsInfo': {'attrs': {'num_unpackstreams_folders', 'unpacksizes', 'digests', 'digestsdefined'}, 'funcs': ['__init__', 'retrieve', '_read', 'write']}, 'StreamsInfo': {'attrs': {'substreamsinfo', 'packinfo', 'unpackinfo'}, 'funcs': ['__init__', 'retrieve', 'read', 'write']}, 'HeaderStreamsInfo': {'attrs': {'packinfo', 'unpackinfo'}, 'funcs': ['__init__', 'write']}, 'FilesInfo': {'attrs': {'files', 'emptyfiles', 'antifiles'}, 'funcs': ['__init__', 'retrieve', '_read', '_read_name', '_read_attributes', '_read_times', '_read_start_pos', '_write_times', '_write_prop_bool_vector', '_are_there', '_write_names', '_write_attributes', 'write']}, 'WriteWithCrc': {'attrs': {'digest', '_fp'}, 'funcs': ['__init__', 'write', 'tell']}, 'Header': {'attrs': {'_start_pos', 'filters', 'password', '_initialized', 'size', 'main_streams', 'solid', 'files_info'}, 'funcs': ['__init__', 'retrieve', '_read', '_encode_header', 'write', '_extract_header_info', 'build_header', 'initialize']}, 'SignatureHeader': {'attrs': {'startheadercrc', 'nextheaderofs', 'nextheadersize', 'nextheadercrc', 'version'}, 'funcs': ['__init__', 'retrieve', '_read', 'calccrc', 'write', '_write_skelton']}})

    # print(collectProgramDesign(test_input_path))
    assert expected == collectProgramDesign(test_input_path)
